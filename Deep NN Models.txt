import numpy as np 
from keras.models import Sequential 
from keras.layers import Dense, Dropout 
from keras.optimizers import SGD 
 
# Define the input and output data (XOR problem) 
X = np.array([[0, 0], 
              [0, 1], 
              [1, 0], 
              [1, 1]]) 
y = np.array([[0], 
              [1], 
              [1], 
              [0]]) 
# Build the neural network 
model = Sequential() 
model.add(Dense(64, input_dim=2, activation='relu')) 
model.add(Dropout(0.5)) 
model.add(Dense(64, activation='relu')) 
model.add(Dropout(0.5)) 
model.add(Dense(1, activation='sigmoid')) 
# Compile the model 
sgd = SGD(learning_rate=0.1) 
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy']) 
# Train the model 
model.fit(X, y, epochs=1000, batch_size=4, verbose=0) 
 
# Evaluate the model 
loss, accuracy = model.evaluate(X, y, verbose=0) 
print("Accuracy: %.2f%%" % (accuracy * 100))